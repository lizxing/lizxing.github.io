<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>redis总结与在java中的简单使用</title>
    <link href="/2020/06/30/20063001/"/>
    <url>/2020/06/30/20063001/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文简单记录redis的相关总结与简单使用</p></blockquote><h3 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h3><h4 id="一、使用篇"><a href="#一、使用篇" class="headerlink" title="一、使用篇"></a>一、使用篇</h4><ol><li>简单认识redis</li><li>redis的安装与启动</li><li>springboot集成redis与简单使用</li><li>redis用作分布式锁</li></ol><h4 id="二、总结篇"><a href="#二、总结篇" class="headerlink" title="二、总结篇"></a>二、总结篇</h4><ol><li>redis的数据类型</li><li>redis的持久化机制</li><li>redis的过期策略及内存淘汰机制</li><li>redis为什么快</li><li>redis如何保证原子性</li><li>redis如何实现异步和非阻塞</li><li>redis事务</li><li>关于缓存存在的问题</li></ol><h3 id="一、使用篇-1"><a href="#一、使用篇-1" class="headerlink" title="一、使用篇"></a>一、使用篇</h3><hr><h4 id="1-简单认识redis"><a href="#1-简单认识redis" class="headerlink" title="1.简单认识redis"></a>1.简单认识redis</h4><h5 id="关于NoSQL"><a href="#关于NoSQL" class="headerlink" title="关于NoSQL"></a>关于NoSQL</h5><p>NoSQL(NoSQL = Not Only SQL )，意即“不仅仅是SQL”，泛指非关系型的数据库。</p><blockquote><p>随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。</p></blockquote><p>而redis是一个以key-value形式存储数据的非关系型数据库。</p><h5 id="redis应用场景"><a href="#redis应用场景" class="headerlink" title="redis应用场景"></a>redis应用场景</h5><ul><li><p>会话缓存。即session cache。</p></li><li><p>全页缓存。</p></li><li><p>队列。</p></li><li><p>排行榜、计时器</p></li><li><p>发布、订阅</p></li></ul><h4 id="2-redis的安装与启动"><a href="#2-redis的安装与启动" class="headerlink" title="2.redis的安装与启动"></a>2.redis的安装与启动</h4><p>安装步骤不再详细写出，参考<a href="https://www.runoob.com/redis/redis-install.html" target="_blank" rel="noopener">菜鸟教程-redis安装</a></p><p>windows下：</p><p>启动：进入redis目录，打开cmd，输入命令“redis-server redis.windows.conf”以开启redis服务。注意不能关闭cmd窗口。（当然可以把服务注册到windows系统服务以在后台运行，这里先不给出）</p><p><img src="C:%5CUsers%5CLZX%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200701095927238.png" srcset="/img/loading.gif" alt="image-20200701095927238"></p><p>连接到redis数据库：再开一个cmd窗口，输入命令”redis-cli -h localhost -p 6379” (默认端口为6379，没有密码)</p><h4 id="3-springboot集成redis与简单使用"><a href="#3-springboot集成redis与简单使用" class="headerlink" title="3.springboot集成redis与简单使用"></a>3.springboot集成redis与简单使用</h4><h5 id="3-1-数据准备"><a href="#3-1-数据准备" class="headerlink" title="3-1.数据准备"></a>3-1.数据准备</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">create table <span class="title">user</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  id <span class="keyword">int</span> primary key auto_increment,</span></span></span><br><span class="line"><span class="function"><span class="params">  name varchar(<span class="number">20</span>)</span>,</span></span><br><span class="line"><span class="function">  age <span class="keyword">int</span></span></span><br><span class="line"><span class="function">)</span></span><br><span class="line"><span class="function">insert into <span class="title">user</span><span class="params">(name,age)</span><span class="title">values</span><span class="params">(<span class="string">"xiaoming"</span>,<span class="number">20</span>)</span></span></span><br><span class="line"><span class="function">insert into <span class="title">user</span><span class="params">(name,age)</span><span class="title">values</span><span class="params">(<span class="string">"daming"</span>,<span class="number">50</span>)</span></span></span><br></pre></td></tr></table></figure><h5 id="3-2-创建springboot项目，添加依赖"><a href="#3-2-创建springboot项目，添加依赖" class="headerlink" title="3-2.创建springboot项目，添加依赖"></a>3-2.创建springboot项目，添加依赖</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- mysql 数据库驱动 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.0.11&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- jpa 数据库ORM框架 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- spring boot redis 缓存引入 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- lettuce pool 缓存连接池 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="3-3-application-properties-配置文件加入redis配置"><a href="#3-3-application-properties-配置文件加入redis配置" class="headerlink" title="3-3. application.properties 配置文件加入redis配置"></a>3-3. <strong>application.properties</strong> 配置文件加入redis配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Spring.dataSource.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.cj.jdbc.Driver</span><br><span class="line">Spring.dataSource.url=jdbc:mysql:<span class="comment">//localhost:3306/redis-demo?serverTimezone=UTC&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">Spring.dataSource.username=root</span><br><span class="line">Spring.dataSource.password=<span class="number">123456</span></span><br><span class="line"></span><br><span class="line"># Redis数据库索引（默认为0）</span><br><span class="line">spring.redis.database=<span class="number">0</span>  </span><br><span class="line"># Redis服务器地址</span><br><span class="line">spring.redis.host=localhost</span><br><span class="line"># Redis服务器连接端口</span><br><span class="line">spring.redis.port=<span class="number">6379</span>  </span><br><span class="line"># Redis服务器连接密码（默认为空）</span><br><span class="line">spring.redis.password=</span><br><span class="line"># 连接池最大连接数（使用负值表示没有限制） 默认 8</span><br><span class="line">spring.redis.lettuce.pool.max-active=<span class="number">8</span></span><br><span class="line"># 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1</span><br><span class="line">spring.redis.lettuce.pool.max-wait=-<span class="number">1</span></span><br><span class="line"># 连接池中的最大空闲连接 默认 8</span><br><span class="line">spring.redis.lettuce.pool.max-idle=<span class="number">8</span></span><br><span class="line"># 连接池中的最小空闲连接 默认 0</span><br><span class="line">spring.redis.lettuce.pool.min-idle=<span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="3-4-新建config包，创建RedisConfig配置类"><a href="#3-4-新建config包，创建RedisConfig配置类" class="headerlink" title="3-4. 新建config包，创建RedisConfig配置类"></a>3-4. <strong>新建config包，创建RedisConfig配置类</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(name = &#123;<span class="string">"redisTemplate"</span>, <span class="string">"stringRedisTemplate"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span>&#123;</span><br><span class="line">        StringRedisTemplate stringRedisTemplate = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">        stringRedisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> RedisTemplate默认只能支持RedisTemplate&lt;String,String&gt;形式的，也就是key-value只能是字符串，不能是其他对象。 所以我们自己定义一个RedisTemplate对象，返回一个自己想要的RedisTemplate对象，自己定义序列化方式 。</p><h5 id="3-5-新建entity包，创建User实体类"><a href="#3-5-新建entity包，创建User实体类" class="headerlink" title="3-5.新建entity包，创建User实体类"></a>3-5.新建entity包，创建User实体类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3055518357571903443L</span>;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    ...getter and setter省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-6-新建dao包，创建UserDao类"><a href="#3-6-新建dao包，创建UserDao类" class="headerlink" title="3-6.新建dao包，创建UserDao类"></a>3-6.新建dao包，创建UserDao类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-7-新建service包，创建UserService"><a href="#3-7-新建service包，创建UserService" class="headerlink" title="3-7.新建service包，创建UserService"></a>3-7.新建service包，创建UserService</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; all = userDao.findAll();</span><br><span class="line">        <span class="keyword">return</span> all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-8-新建util包，创建RedisUtil工具类"><a href="#3-8-新建util包，创建RedisUtil工具类" class="headerlink" title="3-8.新建util包，创建RedisUtil工具类"></a>3-8.新建util包，创建RedisUtil工具类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedisTemplate</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//=============================common============================  </span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒) </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key,<span class="keyword">long</span> time)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(time&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key,TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String ... key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(key!=<span class="keyword">null</span>&amp;&amp;key.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(key.length==<span class="number">1</span>)&#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//============================String=============================  </span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key==<span class="keyword">null</span>?<span class="keyword">null</span>:redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key,Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒) time要大于0 如果time小于等于0 将设置无限期 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key,Object value,<span class="keyword">long</span> time)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(time&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0) </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(delta&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"递增因子必须大于0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0) </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(delta&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"递减因子必须大于0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//================================Map=================================  </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//============================set=============================  </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//===============================list=================================  </span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Map、Set、List三种数据类型的方法省略。</p><h5 id="3-9-在测试类里测试功能"><a href="#3-9-在测试类里测试功能" class="headerlink" title="3-9.在测试类里测试功能"></a>3-9.在测试类里测试功能</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testRedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userService.list();</span><br><span class="line">        System.out.println(userList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (redisUtil.hasKey(userList.get(<span class="number">0</span>).getName()))&#123;</span><br><span class="line">            System.out.println(<span class="string">"已存在"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"不存在"</span>);</span><br><span class="line">            System.out.println(redisUtil.set(userList.get(<span class="number">0</span>).getName(), userList.get(<span class="number">0</span>).getAge().toString()) ? <span class="string">"成功"</span> : <span class="string">"失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5CLZX%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200701101351818.png" srcset="/img/loading.gif" alt="image-20200701101351818"></p><h5 id="3-10-关于注解方式"><a href="#3-10-关于注解方式" class="headerlink" title="3-10.关于注解方式"></a>3-10.关于注解方式</h5><p>以上，可以测试redis的简单使用。当然，也可以使用注解的方式来实现。</p><p> <a href="https://segmentfault.com/a/1190000017057950" target="_blank" rel="noopener">https://segmentfault.com/a/1190000017057950</a> 可参考此连接进行相关配置。</p><h4 id="4-redis用作分布式锁"><a href="#4-redis用作分布式锁" class="headerlink" title="4.redis用作分布式锁"></a>4.redis用作分布式锁</h4><h5 id="4-1-关于锁"><a href="#4-1-关于锁" class="headerlink" title="4-1.关于锁"></a>4-1.关于锁</h5><ul><li>线程锁：主要用来给方法、代码块加锁。当某个方法或者代码块使用锁时，那么在同一时刻至多仅有有一个线程在执行该段代码。当有多个线程访问同一对象的加锁方法/代码块时，同一时间只有一个线程在执行，其余线程必须要等待当前线程执行完之后才能执行该代码段。 例如在java中的synchronized和lock。</li><li>进程锁：为了控制同一操作系统中多个进程访问一个共享资源，只是因为程序的独立性，各个进程是无法控制其他进程对资源的访问的，但是可以使用本地系统的信号量控制 。</li><li>分布式锁：当多个进程不在同一个系统之中时，使用分布式锁控制多个进程对资源的访问。 </li></ul><h5 id="4-2-分布式锁的实现方案"><a href="#4-2-分布式锁的实现方案" class="headerlink" title="4-2.分布式锁的实现方案"></a>4-2.分布式锁的实现方案</h5><p>分布式锁主要是三种方式实现：</p><ul><li>基于关系型数据库。用一个字段记录是否当前数据已被取走。又或者监控时间戳，若返回保存时发现时间戳跟取走的时候不一致，证明期间有其他进程访问，则保存失败。</li><li>基于缓存。</li><li>基于zookeeper。</li></ul><h5 id="4-3-redis用作分布式锁的相关命令"><a href="#4-3-redis用作分布式锁的相关命令" class="headerlink" title="4-3.redis用作分布式锁的相关命令"></a>4-3.redis用作分布式锁的相关命令</h5><ul><li>setnx。setnx当且仅当 key 不存在。若给定的 key 已经存在，则 setnx不做任何动作。setnx 是『set if not exists』(如果不存在，则 set)的简写,setnx 具有原子性。 </li><li>getset。getset先 get 旧值，后set 新值，并返回 key 的旧值(old value），具有原子性。当 key 存在但不是字符串类型时，返回一个错误;当key 不存在的时候，返回nil ，在Java里就是 null。  </li><li>expire 设置 key 的有效期 </li><li>del 删除 key </li></ul><blockquote><p><strong>官方推荐用SETNX实现分布式锁</strong><br>利用SETNX非常简单地实现分布式锁。例如：某客户端要获得一个名字foo的锁，客户端使用下面的命令进行获取：<br>SETNX lock.foo &lt;current Unix time + lock timeout + 1&gt; </p><ul><li>如返回1，则该客户端获得锁，把lock.foo的键值设置为时间值表示该键已被锁定，该客户端最后可以通过DEL lock.foo来释放该锁。</li><li>如返回0，表明该锁已被其他客户端取得，这时我们可以先返回或进行重试等对方完成或等待锁超时。</li></ul></blockquote><h5 id="4-4-基于缓存redis，使用开源-redisson-实现分布式锁"><a href="#4-4-基于缓存redis，使用开源-redisson-实现分布式锁" class="headerlink" title="4-4.基于缓存redis，使用开源 redisson 实现分布式锁"></a>4-4.基于缓存redis，使用开源 redisson 实现分布式锁</h5><p>参考文章<a href="https://blog.csdn.net/zhangcongyi420/article/details/89980469" target="_blank" rel="noopener">SpringBoot整合redisson分布式锁</a></p><h6 id="4-4-1-引入依赖"><a href="#4-4-1-引入依赖" class="headerlink" title="4-4-1.引入依赖"></a>4-4-1.引入依赖</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.redisson&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;redisson&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.5.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h6 id="4-4-2-配置文件"><a href="#4-4-2-配置文件" class="headerlink" title="4-4-2.配置文件"></a>4-4-2.配置文件</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redisson.address=redis:<span class="comment">//127.0.0.1:6379</span></span><br></pre></td></tr></table></figure><h6 id="4-4-3-配置类"><a href="#4-4-3-配置类" class="headerlink" title="4-4-3.配置类"></a>4-4-3.配置类</h6><p>redisson基本配置类，也是大家熟悉的套路，因为redisson支持多种模式下的配置，比如单机、集群、哨兵模式等，都可以根据实际业务需要进行配置，这里为演示方便使用单机配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;redisson.address&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String addressUrl;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedissonClient <span class="title">getRedisson</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">RedissonClient redisson = <span class="keyword">null</span>;</span><br><span class="line">Config config = <span class="keyword">new</span> Config();</span><br><span class="line">config.useSingleServer()</span><br><span class="line">  .setAddress(addressUrl);</span><br><span class="line">redisson = Redisson.create(config);</span><br><span class="line"></span><br><span class="line">System.out.println(redisson.getConfig().toJSON().toString());</span><br><span class="line"><span class="keyword">return</span> redisson;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4-4-4-redisson操作锁的API接口类"><a href="#4-4-4-redisson操作锁的API接口类" class="headerlink" title="4-4-4. redisson操作锁的API接口类"></a>4-4-4. redisson操作锁的API接口类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DistributedLocker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">RLock <span class="title">lock</span><span class="params">(String lockKey)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">RLock <span class="title">lock</span><span class="params">(String lockKey, <span class="keyword">long</span> timeout)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">RLock <span class="title">lock</span><span class="params">(String lockKey, TimeUnit unit, <span class="keyword">long</span> timeout)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String lockKey, TimeUnit unit, <span class="keyword">long</span> waitTime, <span class="keyword">long</span> leaseTime)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">(String lockKey)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">(RLock lock)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4-4-5-接口实现类"><a href="#4-4-5-接口实现类" class="headerlink" title="4-4-5.接口实现类"></a>4-4-5.接口实现类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonDistributedLocker</span> <span class="keyword">implements</span> <span class="title">DistributedLocker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedissonClient redissonClient; <span class="comment">// RedissonClient已经由配置类生成，这里自动装配即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// lock(), 拿不到lock就不罢休，不然线程就一直block</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RLock <span class="title">lock</span><span class="params">(String lockKey)</span> </span>&#123;</span><br><span class="line">RLock lock = redissonClient.getLock(lockKey);</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">return</span> lock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// leaseTime为加锁时间，单位为秒</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RLock <span class="title">lock</span><span class="params">(String lockKey, <span class="keyword">long</span> leaseTime)</span> </span>&#123;</span><br><span class="line">RLock lock = redissonClient.getLock(lockKey);</span><br><span class="line">lock.lock(leaseTime, TimeUnit.SECONDS);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// timeout为加锁时间，时间单位由unit确定</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RLock <span class="title">lock</span><span class="params">(String lockKey, TimeUnit unit, <span class="keyword">long</span> timeout)</span> </span>&#123;</span><br><span class="line">RLock lock = redissonClient.getLock(lockKey);</span><br><span class="line">lock.lock(timeout, unit);</span><br><span class="line"><span class="keyword">return</span> lock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String lockKey, TimeUnit unit, <span class="keyword">long</span> waitTime, <span class="keyword">long</span> leaseTime)</span> </span>&#123;</span><br><span class="line">RLock lock = redissonClient.getLock(lockKey);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> lock.tryLock(waitTime, leaseTime, unit);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">(String lockKey)</span> </span>&#123;</span><br><span class="line">RLock lock = redissonClient.getLock(lockKey);</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">(RLock lock)</span> </span>&#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4-4-6-测试"><a href="#4-4-6-测试" class="headerlink" title="4-4-6.测试"></a>4-4-6.测试</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/redisson"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DistributedLocker distributedLocker;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redissonTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String key = <span class="string">"redisson_key"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.err.println(<span class="string">"=============线程开启============"</span> + Thread.currentThread().getName());</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * distributedLocker.lock(key,10L); //直接加锁，获取不到锁则一直等待获取锁</span></span><br><span class="line"><span class="comment"> * Thread.sleep(100); //获得锁之后可以进行相应的处理</span></span><br><span class="line"><span class="comment"> * System.err.println("======获得锁后进行相应的操作======"+Thread.</span></span><br><span class="line"><span class="comment"> * currentThread().getName());</span></span><br><span class="line"><span class="comment"> * distributedLocker.unlock(key); //解锁</span></span><br><span class="line"><span class="comment"> * System.err.println("============================="+</span></span><br><span class="line"><span class="comment"> * Thread.currentThread().getName());</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">boolean</span> isGetLock = distributedLocker.tryLock(key, TimeUnit.SECONDS, <span class="number">5L</span>, <span class="number">10L</span>); <span class="comment">// 尝试获取锁，等待5秒，自己获得锁后一直不解锁则10秒后自动解锁</span></span><br><span class="line"><span class="keyword">if</span> (isGetLock) &#123;</span><br><span class="line">System.out.println(<span class="string">"线程:"</span> + Thread.currentThread().getName() + <span class="string">",获取到了锁"</span>);</span><br><span class="line">Thread.sleep(<span class="number">100</span>); <span class="comment">// 获得锁之后可以进行相应的处理</span></span><br><span class="line">System.err.println(<span class="string">"======获得锁后进行相应的操作======"</span> + Thread.currentThread().getName());</span><br><span class="line"><span class="comment">//distributedLocker.unlock(key);</span></span><br><span class="line">System.err.println(<span class="string">"============================="</span> + Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">t.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、总结篇-1"><a href="#二、总结篇-1" class="headerlink" title="二、总结篇"></a>二、总结篇</h3><hr><h4 id="1-redis的数据类型"><a href="#1-redis的数据类型" class="headerlink" title="1.redis的数据类型"></a>1.redis的数据类型</h4><ul><li><p>String。基本操作：SET Key Value</p></li><li><p>hash。存放结构化对象。基本操作：a、单个单个存：HSET Key Field Value。 b、多个存：HMSET Key Field1 Value1 Field2 Value2</p></li><li><p>list。顺序队列之类的。基本操作：LPUSH Key Value；LPOP Key</p></li><li><p>set。去重。由于很多服务是集群，如果直接使用java的set还得建一个全局服务去把数据合并起来比较。基本操作：SADD Key value1；SADD Key value2</p></li><li><p>sorted set。有序set。基本操作：ZADD key 1 value1；ZADD key 2 value2</p></li></ul><h4 id="2-redis的持久化机制"><a href="#2-redis的持久化机制" class="headerlink" title="2.redis的持久化机制"></a>2.redis的持久化机制</h4><p>redis通过持久化机制把内存中的数据同步到硬盘文件，当redis重启后把硬盘文件重新加载到内存，以达到恢复数据的目的。参考文章<a href="https://segmentfault.com/a/1190000016021217" target="_blank" rel="noopener">Redis持久化 - RDB和AOF</a></p><p>有两种方式：</p><ul><li><p>RDB。RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储。在默认情况下， Redis 将数据库快照保存在名字为 dump.rdb的二进制文件中。<br>在 Redis 运行时， RDB 程序将当前内存中的数据库快照保存到磁盘文件中， 在 Redis 重启动时， RDB 程序可以通过载入 RDB 文件来还原数据库的状态。</p><ul><li>优势：RDB是一个非常紧凑的文件，它保存了某个时间点得数据集，非常适用于数据集的备份；与AOF相比，在恢复大的数据集的时候，RDB方式会更快一些。</li><li>劣势：耗时、耗性能。RDB 需要经常fork子进程来保存数据集到硬盘上；在子进程写数据的过程中不能对主进程的当前操作保存，若此时意外宕机，则丢失这部分数据。</li></ul></li><li><p>AOF。每当 Redis 执行一个改变数据集的命令时（比如 SET）， 这个命令就会被追加到 AOF 文件的末尾，类似于日志文件。这样的话， 当 Redis 重新启时， 程序就可以通过重新执行 AOF 文件中的命令来达到重建数据集的目的。AOF文件也有重写功能，它把命令集进行优化，生成一个新的 AOF 文件， 这个文件包含重建当前数据集所需的最少命令。redis2.4会可以通过配置自动触发重写。AOF有三种策略：always，每次有新命令追加到 AOF 文件时就执行一次 fsync；everysec，每秒 fsync 一次；no，从不 fsync。显然always消耗性能最大。</p><ul><li>优势：使用默认的每秒fsync策略，Redis的性能依然很好(fsync是由后台线程进行处理的，主线程会尽力处理客户端请求)，一旦出现故障，你最多丢失1秒的数据；AOF 文件有序地保存了对数据库执行的所有写入操作， 这些写入操作以 Redis 协议的格式保存， 因此 AOF 文件的内容非常容易被人读懂。</li><li>劣势：对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积；根据所使用的 fsync 策略，AOF 的速度可能会慢于 RDB 。 </li></ul></li></ul><h4 id="3-redis的过期策略及内存淘汰机制"><a href="#3-redis的过期策略及内存淘汰机制" class="headerlink" title="3.redis的过期策略及内存淘汰机制"></a>3.redis的过期策略及内存淘汰机制</h4><p>redis使用定期删除+惰性删除策略。</p><p>定期删除：指的是redis默认是每隔100ms就随机抽取一些设置了过期时间的key，检查其是否过期，如果过期就删除 </p><p>惰性删除：在你获取某个key的时候，redis会检查一下 ，这个key如果设置了过期时间那么是否过期了，如果过期了此时就会删除，不会给你返回任何东西 </p><p>但是，也会存在一些key从来没被检查过，导致越堆越多，这时候就要用到内存淘汰机制。</p><ul><li><p>noeviction：当内存使用达到阈值的时候，所有引起申请内存的命令会报错。</p></li><li><p>allkeys-lru：在主键空间中，优先移除最近未使用的key。</p></li><li><p>volatile-lru：在设置了过期时间的键空间中，优先移除最近未使用的key。</p></li><li><p>allkeys-random：在主键空间中，随机移除某个key。</p></li><li><p>volatile-random：在设置了过期时间的键空间中，随机移除某个key。</p></li><li><p>volatile-ttl：在设置了过期时间的键空间中，具有更早过期时间的key优先移除。</p></li></ul><p>可以在 redis.conf中配置：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># maxmemory-policy noeviction</span><br></pre></td></tr></table></figure><h4 id="4-redis为什么快"><a href="#4-redis为什么快" class="headerlink" title="4.redis为什么快"></a>4.redis为什么快</h4><ol><li><p>完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)；</p></li><li><p>数据结构简单，对数据操作也简单，Redis中的数据结构是专门进行设计的；</p></li><li><p>采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗；</p></li><li><p>使用多路I/O复用模型，非阻塞IO； 这里“多路”指的是多个网络连接，“复用”指的是复用同一个线程。 </p></li><li><p>使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis直接自己构建了VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求；</p></li></ol><h4 id="5-redis如何保证原子性"><a href="#5-redis如何保证原子性" class="headerlink" title="5.redis如何保证原子性"></a>5.redis如何保证原子性</h4><p>redis是单线程。</p><h4 id="6-redis如何实现异步和非阻塞"><a href="#6-redis如何实现异步和非阻塞" class="headerlink" title="6.redis如何实现异步和非阻塞"></a>6.redis如何实现异步和非阻塞</h4><p>对于Redis的网络请求，Redis会有一个EventLoop，里面有两个数组events,fired。events存放被注册的事件，fired用于存放EventLoop从<strong>多路复用器</strong>（epoll）中读取到的，将要执行的事件。</p><p>异步和非阻塞就反映在这里，注册到<strong>多路复用器</strong>（epoll）后去做其他事，之后通过主动轮询多路复用器，来逐个取出将要执行的事件，放入fired，逐个执行，这个过程是单线程的，因此不会出现并发问题。</p><h4 id="7-redis事务"><a href="#7-redis事务" class="headerlink" title="7.redis事务"></a>7.redis事务</h4><p>事务相关命令：</p><ul><li><p>MULTI。标记一个事务块的开始。</p></li><li><p>EXEC。执行所有事务块内的命令。 </p></li><li><p>DISCARD。取消事务，放弃执行事务块内的所有命令。</p></li><li><p>WATCH key [key …]。监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</p></li><li><p>UNWATCH。取消 WATCH 命令对所有 key 的监视。</p></li></ul><blockquote><p><strong>From redis docs on <a href="http://redis.io/topics/transactions" target="_blank" rel="noopener">transactions</a>:</strong></p><p>It’s important to note that even when a command fails, all the other commands in the queue are processed – Redis will not stop the processing of commands.</p><p>单个 Redis 命令的执行是原子性的，但 Redis 没有在事务上增加任何维持原子性的机制，所以 Redis 事务的执行并不是原子性的。</p><p>事务可以理解为一个打包的批量执行脚本，但批量指令并非原子化的操作，中间某条指令的失败不会导致前面已做指令的回滚，也不会造成后续的指令不做。</p></blockquote><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">7000</span>&gt; multi</span><br><span class="line">OK</span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">7000</span>&gt; set a aaa</span><br><span class="line">QUEUED</span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">7000</span>&gt; set b bbb</span><br><span class="line">QUEUED</span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">7000</span>&gt; set c ccc</span><br><span class="line">QUEUED</span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">7000</span>&gt; exec</span><br><span class="line"><span class="number">1</span>) OK</span><br><span class="line"><span class="number">2</span>) OK</span><br><span class="line"><span class="number">3</span>) OK</span><br></pre></td></tr></table></figure><p>如果在 set b bbb 处失败，set a 已成功不会回滚，set c 还会继续执行。 </p><p>小结：（参考<a href="https://www.cnblogs.com/dwlovelife/p/10946868.html" target="_blank" rel="noopener">Redis的事务讲解</a>）</p><ul><li>事务阶段<ul><li>开启：以MULTI 开启一个事务 </li><li>入队：将多个命令入队到事务中，接到这些命令不会立即执行，而是放到等待执行的事务队列里面</li><li>执行：由EXEC命令触发事务</li></ul></li><li>事务特性<ul><li>单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li><li>没有隔离级别的概念：队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行，也就不存在”事务内的查询要看到事务里的更新，在事务外查询不能看到”这个让人万分头痛的问题</li><li>不保证原子性：redis同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚</li></ul></li></ul><h4 id="8-关于缓存存在的问题"><a href="#8-关于缓存存在的问题" class="headerlink" title="8.关于缓存存在的问题"></a>8.关于缓存存在的问题</h4><ol><li><p>缓存雪崩：同一时间原缓存失效，大量请求直接访问数据库，导致宕机。解决方法两种：</p><ul><li>a、缓存设置过期时间分散。</li><li>b、使用互斥锁(redis的话用setnx)，当缓存失效后，任一线程重新构建key，其他线程等待构建完成再重新执行。</li></ul></li><li><p>缓存穿透：要查询的数据在数据库没有，那么在缓存中也肯定没有。这时每次请求都会访问到缓存和数据库，相当于有两次无用的访问。解决方法两种：</p><ul><li>a、第一次查不到的数据，直接以空结果为value存进缓存中，这样后面的请求就不会访问到数据库，但过期时间不宜过长。</li><li>b、利用布隆过滤器（特点：存在的可能不存在，不存在的一定不存在），将所有可能存在的数据哈希到一个bitmap中，这样一个一定不存在的数据会被直接拦截掉。</li></ul></li><li><p>缓存预热：系统上线后将缓存数据加载到缓存系统，避免直接请求数据库。</p></li><li><p>缓存更新：更新最新的缓存数据。</p></li><li><p>缓存降级：保证核心服务可用。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>技术记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于在Springboot中同时使用@AllArgsConstructor和@Value出现的问题</title>
    <link href="/2020/06/24/20062401/"/>
    <url>/2020/06/24/20062401/</url>
    
    <content type="html"><![CDATA[<p><strong>场景：</strong></p><ul><li><p>类上用@AllArgsConstructor注解来实现Bean的构造函数方式的注入 </p></li><li><p>参数包括@Value注解下的属性</p></li></ul><p><strong>报错：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Description:</span><br><span class="line">Parameter <span class="number">8</span> of constructor in com.zhongkerd.job.service.jobhandler.kalibrate.KalibrateOilPriceServiceImpl required a bean of type <span class="string">'java.lang.String'</span> that could not be found.</span><br><span class="line">无法找到配置信息。</span><br></pre></td></tr></table></figure><p><strong>解决：</strong></p><p>若类内有@Value注解，使用@RequiredArgsConstructor代替@AllArgsConstructor，然后把需要注入的bean改成final类型。</p>]]></content>
    
    
    
    <tags>
      
      <tag>技术记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修改springboot中默认日志logback的配置</title>
    <link href="/2020/05/08/20050802/"/>
    <url>/2020/05/08/20050802/</url>
    
    <content type="html"><![CDATA[<p><strong>需求：</strong></p><p>修改日志配置使得日志按要求每日生成文件。</p><p><strong>默认配置：</strong></p><p>springboot默认使用logback作为日志框架，默认配置在以下路径：</p><p>apache-maven-3.6.1\respository\org\springframework\boot\spring-boot\2.2.4.RELEASE\spring-boot-2.2.4.RELEASE.jar!\org\springframework\boot\logging\logback\base.xml</p><p>也可以在idea工程目录的jar包依赖下查找，位置如下图（示例图来源网络）：</p><p><img src="https://img-blog.csdn.net/20170616100524313?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGlhbnlhbGVpeGlhb3d1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" srcset="/img/loading.gif" alt=""></p><p>base.xml如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">Base logback configuration provided <span class="keyword">for</span> compatibility with Spring Boot <span class="number">1.1</span></span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;included&gt;</span><br><span class="line">&lt;include resource=<span class="string">"org/springframework/boot/logging/logback/defaults.xml"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"LOG_FILE"</span> value=<span class="string">"$&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-/tmp&#125;&#125;&#125;/spring.log&#125;"</span>/&gt;</span><br><span class="line">&lt;include resource=<span class="string">"org/springframework/boot/logging/logback/console-appender.xml"</span> /&gt;</span><br><span class="line">&lt;include resource=<span class="string">"org/springframework/boot/logging/logback/file-appender.xml"</span> /&gt;</span><br><span class="line">&lt;root level=<span class="string">"INFO"</span>&gt;</span><br><span class="line">&lt;appender-ref ref=<span class="string">"CONSOLE"</span> /&gt;</span><br><span class="line">&lt;appender-ref ref=<span class="string">"FILE"</span> /&gt;</span><br><span class="line">&lt;/root&gt;</span><br><span class="line">&lt;/included&gt;</span><br></pre></td></tr></table></figure><p>所include的xml均在同目录下。</p><p><strong>自定义配置：</strong></p><p>在resources文件夹下新建配置文件logback-spring.xml。由于不想进行没必要的修改（网上参考的配置都修改了很多其他地方，比如输出格式），所以先把默认配置全部写入xml，写入后如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;conversionRule conversionWord=<span class="string">"clr"</span> converterClass=<span class="string">"org.springframework.boot.logging.logback.ColorConverter"</span> /&gt;</span><br><span class="line">    &lt;conversionRule conversionWord=<span class="string">"wex"</span> converterClass=<span class="string">"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"</span> /&gt;</span><br><span class="line">    &lt;conversionRule conversionWord=<span class="string">"wEx"</span> converterClass=<span class="string">"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"</span> /&gt;</span><br><span class="line">    &lt;property name=<span class="string">"CONSOLE_LOG_PATTERN"</span> value=<span class="string">"$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"FILE_LOG_PATTERN"</span> value=<span class="string">"$&#123;FILE_LOG_PATTERN:-%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125; $&#123;LOG_LEVEL_PATTERN:-%5p&#125; $&#123;PID:- &#125; --- [%t] %-40.40logger&#123;39&#125; : %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;logger name=<span class="string">"org.apache.catalina.startup.DigesterFactory"</span> level=<span class="string">"ERROR"</span>/&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"org.apache.catalina.util.LifecycleBase"</span> level=<span class="string">"ERROR"</span>/&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span> level=<span class="string">"WARN"</span>/&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"org.apache.sshd.common.util.SecurityUtils"</span> level=<span class="string">"WARN"</span>/&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"org.apache.tomcat.util.net.NioSelectorPool"</span> level=<span class="string">"WARN"</span>/&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"org.eclipse.jetty.util.component.AbstractLifeCycle"</span> level=<span class="string">"ERROR"</span>/&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"org.hibernate.validator.internal.util.Version"</span> level=<span class="string">"WARN"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property name=<span class="string">"LOG_FILE"</span> value=<span class="string">"$&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-/tmp&#125;&#125;&#125;/spring.log&#125;"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;appender name=<span class="string">"CONSOLE"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;$&#123;CONSOLE_LOG_PATTERN&#125;&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;appender name=<span class="string">"FILE"</span></span><br><span class="line">              <span class="class"><span class="keyword">class</span></span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;$&#123;FILE_LOG_PATTERN&#125;&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">        &lt;file&gt;$&#123;LOG_FILE&#125;&lt;/file&gt;</span><br><span class="line">        &lt;rollingPolicy <span class="class"><span class="keyword">class</span></span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span><br><span class="line">            &lt;cleanHistoryOnStart&gt;$&#123;LOG_FILE_CLEAN_HISTORY_ON_START:-false&#125;&lt;/cleanHistoryOnStart&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;ROLLING_FILE_NAME_PATTERN:-$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;.%i.gz&#125;&lt;/fileNamePattern&gt;</span><br><span class="line">            &lt;maxFileSize&gt;$&#123;LOG_FILE_MAX_SIZE:-10MB&#125;&lt;/maxFileSize&gt;</span><br><span class="line">            &lt;maxHistory&gt;$&#123;LOG_FILE_MAX_HISTORY:-7&#125;&lt;/maxHistory&gt;</span><br><span class="line">            &lt;totalSizeCap&gt;$&#123;LOG_FILE_TOTAL_SIZE_CAP:-0&#125;&lt;/totalSizeCap&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;root level=<span class="string">"INFO"</span>&gt;</span><br><span class="line">        &lt;appender-ref ref=<span class="string">"CONSOLE"</span> /&gt;</span><br><span class="line">        &lt;appender-ref ref=<span class="string">"FILE"</span> /&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>此时，运行应用，生效的配置以以上为准。当然，在没进行修改前，应该是与默认的配置一样，若输出格式或其他发生了改变，证明没完全引入原有配置。</p><p>以下修改为按日期在指定目录生成日志文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;conversionRule conversionWord=<span class="string">"clr"</span> converterClass=<span class="string">"org.springframework.boot.logging.logback.ColorConverter"</span> /&gt;</span><br><span class="line">    &lt;conversionRule conversionWord=<span class="string">"wex"</span> converterClass=<span class="string">"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"</span> /&gt;</span><br><span class="line">    &lt;conversionRule conversionWord=<span class="string">"wEx"</span> converterClass=<span class="string">"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"</span> /&gt;</span><br><span class="line">    &lt;property name=<span class="string">"CONSOLE_LOG_PATTERN"</span> value=<span class="string">"$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"FILE_LOG_PATTERN"</span> value=<span class="string">"$&#123;FILE_LOG_PATTERN:-%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125; $&#123;LOG_LEVEL_PATTERN:-%5p&#125; $&#123;PID:- &#125; --- [%t] %-40.40logger&#123;39&#125; : %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;logger name=<span class="string">"org.apache.catalina.startup.DigesterFactory"</span> level=<span class="string">"ERROR"</span>/&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"org.apache.catalina.util.LifecycleBase"</span> level=<span class="string">"ERROR"</span>/&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span> level=<span class="string">"WARN"</span>/&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"org.apache.sshd.common.util.SecurityUtils"</span> level=<span class="string">"WARN"</span>/&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"org.apache.tomcat.util.net.NioSelectorPool"</span> level=<span class="string">"WARN"</span>/&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"org.eclipse.jetty.util.component.AbstractLifeCycle"</span> level=<span class="string">"ERROR"</span>/&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"org.hibernate.validator.internal.util.Version"</span> level=<span class="string">"WARN"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property name=<span class="string">"LOG_FILE"</span> value=<span class="string">"$&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-/tmp&#125;&#125;&#125;/spring.log&#125;"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;appender name=<span class="string">"CONSOLE"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;$&#123;CONSOLE_LOG_PATTERN&#125;&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    &lt;appender name=<span class="string">"FILE"</span>--&gt;</span><br><span class="line">&lt;!--              <span class="class"><span class="keyword">class</span></span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;encoder&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;pattern&gt;$&#123;FILE_LOG_PATTERN&#125;&lt;/pattern&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;/encoder&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;file&gt;$&#123;LOG_FILE&#125;&lt;/file&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;rollingPolicy <span class="class"><span class="keyword">class</span></span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;cleanHistoryOnStart&gt;$&#123;LOG_FILE_CLEAN_HISTORY_ON_START:-false&#125;&lt;/cleanHistoryOnStart&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;fileNamePattern&gt;$&#123;ROLLING_FILE_NAME_PATTERN:-$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;.%i.gz&#125;&lt;/fileNamePattern&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;maxFileSize&gt;$&#123;LOG_FILE_MAX_SIZE:-10MB&#125;&lt;/maxFileSize&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;maxHistory&gt;$&#123;LOG_FILE_MAX_HISTORY:-7&#125;&lt;/maxHistory&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;totalSizeCap&gt;$&#123;LOG_FILE_TOTAL_SIZE_CAP:-0&#125;&lt;/totalSizeCap&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;/rollingPolicy&gt;--&gt;</span><br><span class="line">&lt;!--    &lt;/appender&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 按照每天生成日志文件 --&gt;</span><br><span class="line">    &lt;appender name=<span class="string">"FILE"</span>  <span class="class"><span class="keyword">class</span></span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span><br><span class="line">        &lt;rollingPolicy <span class="class"><span class="keyword">class</span></span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span><br><span class="line">            &lt;!--日志文件输出的文件名--&gt;</span><br><span class="line">            &lt;FileNamePattern&gt;test-%d&#123;yyyy-MM-dd&#125;.log&lt;/FileNamePattern&gt;</span><br><span class="line">            &lt;!--日志文件保留天数--&gt;</span><br><span class="line">            &lt;MaxHistory&gt;60&lt;/MaxHistory&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">        &lt;!-- 日志文件的格式 --&gt;</span><br><span class="line">        &lt;encoder <span class="class"><span class="keyword">class</span></span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span><br><span class="line">            &lt;pattern&gt;$&#123;FILE_LOG_PATTERN&#125;&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">        &lt;!-- 此日志文件记录级别 --&gt;</span><br><span class="line">        &lt;filter <span class="class"><span class="keyword">class</span></span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span><br><span class="line">            &lt;level&gt;INFO&lt;/level&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;root level=<span class="string">"INFO"</span>&gt;</span><br><span class="line">        &lt;appender-ref ref=<span class="string">"CONSOLE"</span> /&gt;</span><br><span class="line">        &lt;appender-ref ref=<span class="string">"FILE"</span> /&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>至此，完成修改。</p>]]></content>
    
    
    
    <tags>
      
      <tag>技术记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Java中使用List或Map中的contains或containsKey方法判断自定义对象</title>
    <link href="/2020/05/08/20050801/"/>
    <url>/2020/05/08/20050801/</url>
    
    <content type="html"><![CDATA[<p><strong>对于普通Java类型</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; testList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">testList.add(<span class="string">"A"</span>);</span><br><span class="line">testList.add(<span class="string">"B"</span>);</span><br><span class="line">testList.add(<span class="string">"C"</span>);</span><br><span class="line">String newStr = <span class="string">"A"</span>;</span><br><span class="line"><span class="keyword">if</span> (testList.contains(newStr))&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"exist"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"no exist"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>但对于自定义类型，直接使用contains方法不能达到预期效果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; testList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">testList.add(<span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"A"</span>));</span><br><span class="line">testList.add(<span class="keyword">new</span> User(<span class="number">2</span>,<span class="string">"B"</span>));</span><br><span class="line">testList.add(<span class="keyword">new</span> User(<span class="number">3</span>,<span class="string">"C"</span>));</span><br><span class="line">User newUser = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"A"</span>);</span><br><span class="line"><span class="keyword">if</span> (testList.contains(newUser))&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"exist"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"no exist"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况下，返回no exist。</p><p><strong>观察List中contains方法源码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">               <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                   <span class="keyword">return</span> i;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">               <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                   <span class="keyword">return</span> i;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>从源码中可以看到，contains方法调用indexOf方法，并使用了equals来判断是否相等。</p><p><strong>关于equals：</strong></p><p>equals在比较字符串是与==是有区别的（因为String也重写了equals），具体这里不再说明。但是对比object对象是的效果与==是一致的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>重写equals：</strong></p><p>根据以上源码，我们知道用contains比较自定义对象时，不能直接使用，需要重写equals方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> User)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       User user = (User) o;</span><br><span class="line">       <span class="keyword">return</span> userId.equals(user.userId) &amp;&amp;</span><br><span class="line">               userName.equals(user.userName);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>若使用ieda，可以直接generate出这个方法并重写，不需要手写。</p><p>*<em>重写hashcode： *</em></p><p>关于为什么在重写equals方法时要同时重写hashcode方法，应该都已经有所了解，这里简单引用一下。</p><blockquote><h3 id="hashCode（）与-equals（）的相关规定"><a href="#hashCode（）与-equals（）的相关规定" class="headerlink" title="hashCode（）与 equals（）的相关规定"></a>hashCode（）与 equals（）的相关规定</h3><ol><li>如果两个对象相等，则 hashcode 一定也是相同的</li><li>两个对象相等,对两个对象分别调用 equals 方法都返回 true</li><li>两个对象有相同的 hashcode 值，它们也不一定是相等的</li><li><strong>因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖</strong></li><li>hashCode() 的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> Objects.hash(userId, userName);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>通用可以使用idea自动生成。</p><p>至此，使用contains方法判断自定义对象就可以正常使用了。</p><p>Map中的containsKey方法同理，以下记录一下真实的使用情况（可无视）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatchStationOilConcessionsFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String shopId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String goodsId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        BatchStationOilConcessionsFilter that = (BatchStationOilConcessionsFilter) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(shopId, that.shopId) &amp;&amp;</span><br><span class="line">                Objects.equals(goodsId, that.goodsId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(shopId, goodsId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dataFilter</span><span class="params">(List&lt;BatchStationOilConcessionsDTO&gt; batchStationOilConcessionsDTOList)</span></span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必须保证顺序</span></span><br><span class="line">        Map&lt;BatchStationOilConcessionsFilter, Date&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把shopId和goodsId存进batchStationOilConcessionsFilterList</span></span><br><span class="line">        <span class="keyword">for</span> (BatchStationOilConcessionsDTO batchStationOilConcessionsDTO : batchStationOilConcessionsDTOList)&#123;</span><br><span class="line">            BatchStationOilConcessionsFilter batchStationOilConcessionsFilter = <span class="keyword">new</span> BatchStationOilConcessionsFilter();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                BeanUtils.copyProperties(batchStationOilConcessionsFilter, batchStationOilConcessionsDTO);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(batchStationOilConcessionsFilter))&#123;</span><br><span class="line">                <span class="comment">// 记录index,后面删除</span></span><br><span class="line">                list.add(batchStationOilConcessionsDTO.getIndex());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(batchStationOilConcessionsFilter, <span class="keyword">new</span> Date());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"重复的："</span> + list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>技术记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于springboot部署在windows系统</title>
    <link href="/2020/04/27/20042703/"/>
    <url>/2020/04/27/20042703/</url>
    
    <content type="html"><![CDATA[<p><strong>问题：</strong></p><p>若springboot通过在cmd窗口运行java -jar的方式部署在windows系统，在cmd窗口关闭后，服务会同时关闭。</p><p><strong>以下方式可以把服务注册到系统并长期运行：</strong></p><ol><li><p>首先下载WinSW。这是一个把服务在系统上注册、卸载的工具，github上开源。可以在这里下载<a href="https://github.com/kohsuke/winsw" target="_blank" rel="noopener">WinSW的github地址</a>。主要下载winsw.exe和winsw.xml两个文件，下载后放入一个目录例如winsw。</p></li><li><p>下载后把这两个文件修改为服务的名字。并打开xml文件编写配置，示例如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;service&gt;</span><br><span class="line">  &lt;id&gt;xxx-service&lt;/id&gt; &lt;!--服务ID--&gt;</span><br><span class="line">  &lt;name&gt;xxx后端服务&lt;/name&gt; &lt;!--服务名--&gt;</span><br><span class="line">  &lt;description&gt;xxx后端服务&lt;/description&gt; &lt;!--服务描述--&gt;</span><br><span class="line">  &lt;executable&gt;F:\Java\xxx部署测试\jre1.8.0_231\bin\java&lt;/executable&gt; &lt;!--运行方式--&gt;</span><br><span class="line">  &lt;arguments&gt;-jar "F:\Java\xxx部署测试\xxx-0.0.1-SNAPSHOT.jar"&lt;/arguments&gt; &lt;!--执行参数--&gt;</span><br><span class="line">  &lt;logmode&gt;rotate&lt;/logmode&gt; &lt;!--循环日志--&gt;</span><br><span class="line">&lt;/service&gt;</span><br></pre></td></tr></table></figure><p>更多具体参数可参考官网。</p></li><li><p>在winsw同目录下放入springboot打包后的xxx-0.0.1-SNAPSHOT.jar。</p></li><li><p>关于注册与开启服务。进入winsw目录，打开cmd窗口。</p><p>运行以下命令以注册服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx-service install</span><br></pre></td></tr></table></figure><p>运行以下命令以启动服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx-service start</span><br></pre></td></tr></table></figure><p>此时，可在任务管理器——服务选项看到此服务并已开启。（测试时重启系统后服务会自动开启，需加以验证）。</p></li><li><p>关于停止与卸载服务。进入winsw目录，打开cmd窗口。</p><p>运行以下命令以停止服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx-service stop</span><br></pre></td></tr></table></figure><p>运行以下命令以卸载服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx-service uninstall</span><br></pre></td></tr></table></figure></li><li><p>*可以编写对应bat脚本，方便操作。示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@echo</span> off</span><br><span class="line"></span><br><span class="line">::打开cmd注册xxx服务,然后启动</span><br><span class="line">start cmd /k <span class="string">"cd/d winsw&amp;&amp;xxx-service install&amp;&amp;xxx-service start&amp;&amp;exit"</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@echo</span> off</span><br><span class="line"></span><br><span class="line">::打开cmd停止xxx服务，然后卸载</span><br><span class="line">start cmd /k <span class="string">"cd/d winsw&amp;&amp;xxx-service stop&amp;&amp;xxx-service uninstall&amp;&amp;exit"</span></span><br></pre></td></tr></table></figure><p>此两bat文件放于winsw同目录下，双击运行即可。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>技术记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用SSH连接数据库示例代码记录</title>
    <link href="/2020/04/27/20042702/"/>
    <url>/2020/04/27/20042702/</url>
    
    <content type="html"><![CDATA[<p><strong>需求：</strong></p><p>数据库使用普通连接失败，需要使用ssh连接方式。</p><p><strong>原本配置：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">oil-pay:</span><br><span class="line">url: jdbc:mysql:<span class="comment">//ip:3306/数据库名?Unicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">username: 用户名</span><br><span class="line">password: 密码</span><br><span class="line">driver-class-name: com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure><p><strong>使用ssh需要修改配置及增加代码:</strong></p><p><strong>ssh配置：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">oil-pay:</span><br><span class="line">url: jdbc:mysql:<span class="comment">//127.0.0.1:3307/数据库名?Unicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span></span><br><span class="line">username: 用户名同上</span><br><span class="line">password: 密码同上</span><br><span class="line">driver-class-name: com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure><p><strong>增加config代码：</strong></p><ol><li>编写MyContextListener实现ServletContextListener</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyContextListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SSHConnection conexionssh;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyContextListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> ServletContextListener#contextInitialized(ServletContextEvent)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent arg0)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 建立连接</span></span><br><span class="line">        log.info(<span class="string">"准备建立连接"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conexionssh = <span class="keyword">new</span> SSHConnection();</span><br><span class="line">            conexionssh.SSHConnection();</span><br><span class="line">            log.info(<span class="string">"成功建立SSH连接"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            log.error(<span class="string">"创建SSH连接失败"</span>);</span><br><span class="line">            <span class="comment">// error connecting SSH server</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> ServletContextListener#contextDestroyed(ServletContextEvent)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent arg0)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 断开连接</span></span><br><span class="line">        log.info(<span class="string">"准备关闭SSH连接"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conexionssh.closeSSH();</span><br><span class="line">            log.info(<span class="string">"成功断开SSH连接"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"断开SSH连接出错"</span>);</span><br><span class="line">            <span class="comment">// error closing SSH server</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>编写SSHConnection</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SSHConnection</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SSH服务器登录名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String user = <span class="string">"root"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SSH服务器登录密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String password = <span class="string">"xxxxxx"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SSH服务器公网IP</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String host = <span class="string">"x.x.x.x"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SSH服务器默认端口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port = <span class="number">22</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本地端口，随便选一个没占用的即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> local_port = <span class="number">3307</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要访问的mysql的IP</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String remote_host = <span class="string">"ip"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要访问的mysql的端口号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> remote_port = <span class="number">3306</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Session session = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *    建立SSH连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SSHConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JSch jsch = <span class="keyword">new</span> JSch();</span><br><span class="line">            session = jsch.getSession(user, host, port);</span><br><span class="line">            session.setPassword(password);</span><br><span class="line">            session.setConfig(<span class="string">"StrictHostKeyChecking"</span>, <span class="string">"no"</span>);</span><br><span class="line">            <span class="comment">// 日志打印</span></span><br><span class="line">            session.connect();</span><br><span class="line">            session.setPortForwardingL(local_port, remote_host, remote_port);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"建立SSH连接失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *    断开SSH连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeSSH</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session.disconnect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>技术记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于List遍历过程中删除元素报错问题</title>
    <link href="/2020/04/27/20042701/"/>
    <url>/2020/04/27/20042701/</url>
    
    <content type="html"><![CDATA[<p><strong>报错：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.util.ConcurrentModificationException: <span class="keyword">null</span></span><br><span class="line">at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:<span class="number">909</span>) ~[na:<span class="number">1.8</span><span class="number">.0_231</span>]</span><br><span class="line">at java.util.ArrayList$Itr.next(ArrayList.java:<span class="number">859</span>) ~[na:<span class="number">1.8</span><span class="number">.0_231</span>]</span><br></pre></td></tr></table></figure><p><strong>问题代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (RptShiftCashCurrencyNEntity rptShiftCashCurrencyNEntity : rptShiftCashCurrencyNEntityList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"B"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()) || <span class="string">"G"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()) || <span class="string">"N"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()) || <span class="string">"8"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()) || <span class="string">"9"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType())) &#123;</span><br><span class="line">                rptShiftCashCurrencyNEntityList.remove(rptShiftCashCurrencyNEntity);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>在解决问题前，先看一段简化代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(String s:list)&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.equals(<span class="string">"B"</span>))&#123;</span><br><span class="line">        list.remove(x);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法会存在问题，会抛出ConcurrentModificationException。 因为元素在使用的时候发生了并发的修改，导致异常抛出。但是删除完毕马上使用break跳出，则不会触发报错。 </p><p><strong>解决：</strong></p><p>使用迭代器完成删除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    String s = it.next();</span><br><span class="line">    <span class="keyword">if</span>(s.equals(<span class="string">"B"</span>))&#123;</span><br><span class="line">        it.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题代码修改为：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;RptShiftCashCurrencyNEntity&gt; it = rptShiftCashCurrencyNEntityList.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">            RptShiftCashCurrencyNEntity rptShiftCashCurrencyNEntity = it.next();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"B"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()) || <span class="string">"G"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()) || <span class="string">"N"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()) || <span class="string">"8"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()) || <span class="string">"9"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType())) &#123;</span><br><span class="line">                it.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>也可以使用java8特性removeIf方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rptShiftCashCurrencyNEntityList.removeIf(rptShiftCashCurrencyNEntity -&gt; <span class="string">"B"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()) || <span class="string">"G"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()) || <span class="string">"N"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()) || <span class="string">"8"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()) || <span class="string">"9"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()));</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>技术记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于程序连接远程数据库错误，而使用数据库连接工具正常</title>
    <link href="/2020/04/03/20040301/"/>
    <url>/2020/04/03/20040301/</url>
    
    <content type="html"><![CDATA[<p><strong>报错：</strong></p><p><img src="E:%5CTypora%5Cimg%5Ca.png" srcset="/img/loading.gif" alt=""></p><p><strong>原因：</strong>（待明确）</p><p>上次连接未断开。</p><p>1、程序上在结束时未正常断开，导致服务端已放弃链接而客户端（程序）链接还存在，下次查询时未重新建立链接。</p><p>2、服务端还保留着链接，而客户端（程序）在建立连接时检测到链接已被占用导致异常。</p><p><strong>解决：</strong></p><p>重启服务端sql server服务。</p>]]></content>
    
    
    
    <tags>
      
      <tag>技术记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Nacos连接Mysql8.0版本不支持</title>
    <link href="/2020/03/27/20032701/"/>
    <url>/2020/03/27/20032701/</url>
    
    <content type="html"><![CDATA[<p><strong>原因：</strong></p><p>mysql8.0以后驱动有所变化，无法使用旧驱动连接。</p><p><strong>解决：</strong></p><p>1、修改目录下pom.xml文件中的mysql驱动</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.0.16&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2、 修改naming这个项目 com.alibaba.nacos.naming.healthcheck 包下的 MysqlHealthCheckProcessor 类，引入的驱动包修改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mysql.cj.jdbc.MysqlDataSource;</span><br></pre></td></tr></table></figure><p>3、 修改 console这项目 resources/META-INF下 nacos-default.properties这个文件 ，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.url<span class="number">.0</span>=jdbc:mysql:<span class="comment">//localhost:3306/nacos?serverTimezone=UTC&amp;characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line">db.url<span class="number">.1</span>=jdbc:mysql:<span class="comment">//localhost:3306/nacos?serverTimezone=UTC&amp;characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br></pre></td></tr></table></figure><p> 注意：在db.url.0中添加时区 serverTimezone=UTC </p><p>4、打包</p><p> cmd命令窗口进入项目根目录执行： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -Prelease-nacos clean install -U</span><br></pre></td></tr></table></figure><p> 执行完成之后打包好的文件在项目根目录下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根目录\distribution\target</span><br></pre></td></tr></table></figure><p>5、修改配置</p><p> 打开conf目录下的配置文件，在末尾添加数据源配置： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.platform=mysql</span><br><span class="line">db.num=<span class="number">1</span></span><br><span class="line">db.url<span class="number">.0</span>=jdbc:mysql:<span class="comment">//localhost:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;serverTimezone=UTC</span></span><br><span class="line">db.user=root</span><br><span class="line">db.password=<span class="number">123456</span></span><br></pre></td></tr></table></figure><p>6、 然后在MySQL数据库中新建nacos数据库，并导入Nacos解压包conf目录下的nacos-mysql.sql脚本 </p><p>7、启动</p>]]></content>
    
    
    
    <tags>
      
      <tag>技术记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2020/03/24/test/"/>
    <url>/2020/03/24/test/</url>
    
    <content type="html"><![CDATA[<p>置顶测试2</p>]]></content>
    
    
    
    <tags>
      
      <tag>闲情逸致</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我有故事了，你有酒吗？</title>
    <link href="/2020/03/24/story/"/>
    <url>/2020/03/24/story/</url>
    
    <content type="html"><![CDATA[<p>很多时候，都在听别人的故事，或是惨淡潦倒，或是春风得意，但那始终属于别人。其实，我也有自己的故事，只是，还未碰到喜欢的酒，还没遇见合适的人。</p>]]></content>
    
    
    
    <tags>
      
      <tag>闲情逸致</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Spring Cloud Eureka注册中心引入Spring Security后，服务无法注册的问题</title>
    <link href="/2020/03/24/20032401/"/>
    <url>/2020/03/24/20032401/</url>
    
    <content type="html"><![CDATA[<p><strong>报错：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server</span><br><span class="line">at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:<span class="number">112</span>) ~[eureka-client-<span class="number">1.9</span><span class="number">.17</span>.jar:<span class="number">1.9</span><span class="number">.17</span>]</span><br><span class="line">at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:<span class="number">56</span>) ~[eureka-client-<span class="number">1.9</span><span class="number">.17</span>.jar:<span class="number">1.9</span><span class="number">.17</span>]</span><br><span class="line">at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$<span class="number">1</span>.execute(EurekaHttpClientDecorator.java:<span class="number">59</span>) ~[eureka-client-<span class="number">1.9</span><span class="number">.17</span>.jar:<span class="number">1.9</span><span class="number">.17</span>]</span><br><span class="line">at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:<span class="number">77</span>) ~[eureka-client-<span class="number">1.9</span><span class="number">.17</span>.jar:<span class="number">1.9</span><span class="number">.17</span>]</span><br><span class="line">at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:<span class="number">56</span>) ~[eureka-client-<span class="number">1.9</span><span class="number">.17</span>.jar:<span class="number">1.9</span><span class="number">.17</span>]</span><br><span class="line">at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:<span class="number">850</span>) ~[eureka-client-<span class="number">1.9</span><span class="number">.17</span>.jar:<span class="number">1.9</span><span class="number">.17</span>]</span><br><span class="line">at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:<span class="number">121</span>) [eureka-client-<span class="number">1.9</span><span class="number">.17</span>.jar:<span class="number">1.9</span><span class="number">.17</span>]</span><br><span class="line">at com.netflix.discovery.InstanceInfoReplicator$<span class="number">1</span>.run(InstanceInfoReplicator.java:<span class="number">101</span>) [eureka-client-<span class="number">1.9</span><span class="number">.17</span>.jar:<span class="number">1.9</span><span class="number">.17</span>]</span><br><span class="line">at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:<span class="number">511</span>) [na:<span class="number">1.8</span><span class="number">.0_231</span>]</span><br><span class="line">at java.util.concurrent.FutureTask.run(FutureTask.java:<span class="number">266</span>) [na:<span class="number">1.8</span><span class="number">.0_231</span>]</span><br><span class="line">at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$<span class="number">201</span>(ScheduledThreadPoolExecutor.java:<span class="number">180</span>) [na:<span class="number">1.8</span><span class="number">.0_231</span>]</span><br><span class="line">at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:<span class="number">293</span>) [na:<span class="number">1.8</span><span class="number">.0_231</span>]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1149</span>) [na:<span class="number">1.8</span><span class="number">.0_231</span>]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">624</span>) [na:<span class="number">1.8</span><span class="number">.0_231</span>]</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>) [na:<span class="number">1.8</span><span class="number">.0_231</span>]</span><br></pre></td></tr></table></figure><p><strong>原因：</strong></p><p>新版本的security默认开启csrf了，关掉就好了</p><p><strong>解决：</strong></p><p>新键WebSecurityConfig类，修改默认配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.csrf().disable(); <span class="comment">// 关闭csrf</span></span><br><span class="line">        http.authorizeRequests().anyRequest().authenticated().and().httpBasic(); <span class="comment">// 开启认证</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>技术记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
