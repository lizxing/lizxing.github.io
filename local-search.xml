<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于在Springboot中同时使用@AllArgsConstructor和@Value出现的问题</title>
    <link href="/2020/06/24/20062401/"/>
    <url>/2020/06/24/20062401/</url>
    
    <content type="html"><![CDATA[<p><strong>场景：</strong></p><ul><li><p>类上用@AllArgsConstructor注解来实现Bean的构造函数方式的注入 </p></li><li><p>参数包括@Value注解下的属性</p></li></ul><p><strong>报错：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Description:</span><br><span class="line">Parameter <span class="number">8</span> of constructor in com.zhongkerd.job.service.jobhandler.kalibrate.KalibrateOilPriceServiceImpl required a bean of type <span class="string">'java.lang.String'</span> that could not be found.</span><br><span class="line">无法找到配置信息。</span><br></pre></td></tr></table></figure><p><strong>解决：</strong></p><p>若类内有@Value注解，使用@RequiredArgsConstructor代替@AllArgsConstructor，然后把需要注入的bean改成final类型。</p>]]></content>
    
    
    
    <tags>
      
      <tag>技术记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修改springboot中默认日志logback的配置</title>
    <link href="/2020/05/08/20050802/"/>
    <url>/2020/05/08/20050802/</url>
    
    <content type="html"><![CDATA[<p><strong>需求：</strong></p><p>修改日志配置使得日志按要求每日生成文件。</p><p><strong>默认配置：</strong></p><p>springboot默认使用logback作为日志框架，默认配置在以下路径：</p><p>apache-maven-3.6.1\respository\org\springframework\boot\spring-boot\2.2.4.RELEASE\spring-boot-2.2.4.RELEASE.jar!\org\springframework\boot\logging\logback\base.xml</p><p>也可以在idea工程目录的jar包依赖下查找，位置如下图（示例图来源网络）：</p><p><img src="https://img-blog.csdn.net/20170616100524313?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGlhbnlhbGVpeGlhb3d1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" srcset="/img/loading.gif" alt=""></p><p>base.xml如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">Base logback configuration provided <span class="keyword">for</span> compatibility with Spring Boot <span class="number">1.1</span></span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;included&gt;</span><br><span class="line">&lt;include resource=<span class="string">"org/springframework/boot/logging/logback/defaults.xml"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"LOG_FILE"</span> value=<span class="string">"$&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-/tmp&#125;&#125;&#125;/spring.log&#125;"</span>/&gt;</span><br><span class="line">&lt;include resource=<span class="string">"org/springframework/boot/logging/logback/console-appender.xml"</span> /&gt;</span><br><span class="line">&lt;include resource=<span class="string">"org/springframework/boot/logging/logback/file-appender.xml"</span> /&gt;</span><br><span class="line">&lt;root level=<span class="string">"INFO"</span>&gt;</span><br><span class="line">&lt;appender-ref ref=<span class="string">"CONSOLE"</span> /&gt;</span><br><span class="line">&lt;appender-ref ref=<span class="string">"FILE"</span> /&gt;</span><br><span class="line">&lt;/root&gt;</span><br><span class="line">&lt;/included&gt;</span><br></pre></td></tr></table></figure><p>所include的xml均在同目录下。</p><p><strong>自定义配置：</strong></p><p>在resources文件夹下新建配置文件logback-spring.xml。由于不想进行没必要的修改（网上参考的配置都修改了很多其他地方，比如输出格式），所以先把默认配置全部写入xml，写入后如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;conversionRule conversionWord=<span class="string">"clr"</span> converterClass=<span class="string">"org.springframework.boot.logging.logback.ColorConverter"</span> /&gt;</span><br><span class="line">    &lt;conversionRule conversionWord=<span class="string">"wex"</span> converterClass=<span class="string">"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"</span> /&gt;</span><br><span class="line">    &lt;conversionRule conversionWord=<span class="string">"wEx"</span> converterClass=<span class="string">"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"</span> /&gt;</span><br><span class="line">    &lt;property name=<span class="string">"CONSOLE_LOG_PATTERN"</span> value=<span class="string">"$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"FILE_LOG_PATTERN"</span> value=<span class="string">"$&#123;FILE_LOG_PATTERN:-%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125; $&#123;LOG_LEVEL_PATTERN:-%5p&#125; $&#123;PID:- &#125; --- [%t] %-40.40logger&#123;39&#125; : %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;logger name=<span class="string">"org.apache.catalina.startup.DigesterFactory"</span> level=<span class="string">"ERROR"</span>/&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"org.apache.catalina.util.LifecycleBase"</span> level=<span class="string">"ERROR"</span>/&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span> level=<span class="string">"WARN"</span>/&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"org.apache.sshd.common.util.SecurityUtils"</span> level=<span class="string">"WARN"</span>/&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"org.apache.tomcat.util.net.NioSelectorPool"</span> level=<span class="string">"WARN"</span>/&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"org.eclipse.jetty.util.component.AbstractLifeCycle"</span> level=<span class="string">"ERROR"</span>/&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"org.hibernate.validator.internal.util.Version"</span> level=<span class="string">"WARN"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property name=<span class="string">"LOG_FILE"</span> value=<span class="string">"$&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-/tmp&#125;&#125;&#125;/spring.log&#125;"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;appender name=<span class="string">"CONSOLE"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;$&#123;CONSOLE_LOG_PATTERN&#125;&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;appender name=<span class="string">"FILE"</span></span><br><span class="line">              <span class="class"><span class="keyword">class</span></span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;$&#123;FILE_LOG_PATTERN&#125;&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">        &lt;file&gt;$&#123;LOG_FILE&#125;&lt;/file&gt;</span><br><span class="line">        &lt;rollingPolicy <span class="class"><span class="keyword">class</span></span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span><br><span class="line">            &lt;cleanHistoryOnStart&gt;$&#123;LOG_FILE_CLEAN_HISTORY_ON_START:-false&#125;&lt;/cleanHistoryOnStart&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;ROLLING_FILE_NAME_PATTERN:-$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;.%i.gz&#125;&lt;/fileNamePattern&gt;</span><br><span class="line">            &lt;maxFileSize&gt;$&#123;LOG_FILE_MAX_SIZE:-10MB&#125;&lt;/maxFileSize&gt;</span><br><span class="line">            &lt;maxHistory&gt;$&#123;LOG_FILE_MAX_HISTORY:-7&#125;&lt;/maxHistory&gt;</span><br><span class="line">            &lt;totalSizeCap&gt;$&#123;LOG_FILE_TOTAL_SIZE_CAP:-0&#125;&lt;/totalSizeCap&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;root level=<span class="string">"INFO"</span>&gt;</span><br><span class="line">        &lt;appender-ref ref=<span class="string">"CONSOLE"</span> /&gt;</span><br><span class="line">        &lt;appender-ref ref=<span class="string">"FILE"</span> /&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>此时，运行应用，生效的配置以以上为准。当然，在没进行修改前，应该是与默认的配置一样，若输出格式或其他发生了改变，证明没完全引入原有配置。</p><p>以下修改为按日期在指定目录生成日志文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;conversionRule conversionWord=<span class="string">"clr"</span> converterClass=<span class="string">"org.springframework.boot.logging.logback.ColorConverter"</span> /&gt;</span><br><span class="line">    &lt;conversionRule conversionWord=<span class="string">"wex"</span> converterClass=<span class="string">"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"</span> /&gt;</span><br><span class="line">    &lt;conversionRule conversionWord=<span class="string">"wEx"</span> converterClass=<span class="string">"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"</span> /&gt;</span><br><span class="line">    &lt;property name=<span class="string">"CONSOLE_LOG_PATTERN"</span> value=<span class="string">"$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"FILE_LOG_PATTERN"</span> value=<span class="string">"$&#123;FILE_LOG_PATTERN:-%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125; $&#123;LOG_LEVEL_PATTERN:-%5p&#125; $&#123;PID:- &#125; --- [%t] %-40.40logger&#123;39&#125; : %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;logger name=<span class="string">"org.apache.catalina.startup.DigesterFactory"</span> level=<span class="string">"ERROR"</span>/&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"org.apache.catalina.util.LifecycleBase"</span> level=<span class="string">"ERROR"</span>/&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span> level=<span class="string">"WARN"</span>/&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"org.apache.sshd.common.util.SecurityUtils"</span> level=<span class="string">"WARN"</span>/&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"org.apache.tomcat.util.net.NioSelectorPool"</span> level=<span class="string">"WARN"</span>/&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"org.eclipse.jetty.util.component.AbstractLifeCycle"</span> level=<span class="string">"ERROR"</span>/&gt;</span><br><span class="line">    &lt;logger name=<span class="string">"org.hibernate.validator.internal.util.Version"</span> level=<span class="string">"WARN"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property name=<span class="string">"LOG_FILE"</span> value=<span class="string">"$&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-/tmp&#125;&#125;&#125;/spring.log&#125;"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;appender name=<span class="string">"CONSOLE"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;$&#123;CONSOLE_LOG_PATTERN&#125;&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    &lt;appender name=<span class="string">"FILE"</span>--&gt;</span><br><span class="line">&lt;!--              <span class="class"><span class="keyword">class</span></span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;encoder&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;pattern&gt;$&#123;FILE_LOG_PATTERN&#125;&lt;/pattern&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;/encoder&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;file&gt;$&#123;LOG_FILE&#125;&lt;/file&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;rollingPolicy <span class="class"><span class="keyword">class</span></span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;cleanHistoryOnStart&gt;$&#123;LOG_FILE_CLEAN_HISTORY_ON_START:-false&#125;&lt;/cleanHistoryOnStart&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;fileNamePattern&gt;$&#123;ROLLING_FILE_NAME_PATTERN:-$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;.%i.gz&#125;&lt;/fileNamePattern&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;maxFileSize&gt;$&#123;LOG_FILE_MAX_SIZE:-10MB&#125;&lt;/maxFileSize&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;maxHistory&gt;$&#123;LOG_FILE_MAX_HISTORY:-7&#125;&lt;/maxHistory&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;totalSizeCap&gt;$&#123;LOG_FILE_TOTAL_SIZE_CAP:-0&#125;&lt;/totalSizeCap&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;/rollingPolicy&gt;--&gt;</span><br><span class="line">&lt;!--    &lt;/appender&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 按照每天生成日志文件 --&gt;</span><br><span class="line">    &lt;appender name=<span class="string">"FILE"</span>  <span class="class"><span class="keyword">class</span></span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span><br><span class="line">        &lt;rollingPolicy <span class="class"><span class="keyword">class</span></span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span><br><span class="line">            &lt;!--日志文件输出的文件名--&gt;</span><br><span class="line">            &lt;FileNamePattern&gt;test-%d&#123;yyyy-MM-dd&#125;.log&lt;/FileNamePattern&gt;</span><br><span class="line">            &lt;!--日志文件保留天数--&gt;</span><br><span class="line">            &lt;MaxHistory&gt;60&lt;/MaxHistory&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">        &lt;!-- 日志文件的格式 --&gt;</span><br><span class="line">        &lt;encoder <span class="class"><span class="keyword">class</span></span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span><br><span class="line">            &lt;pattern&gt;$&#123;FILE_LOG_PATTERN&#125;&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">        &lt;!-- 此日志文件记录级别 --&gt;</span><br><span class="line">        &lt;filter <span class="class"><span class="keyword">class</span></span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span><br><span class="line">            &lt;level&gt;INFO&lt;/level&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;root level=<span class="string">"INFO"</span>&gt;</span><br><span class="line">        &lt;appender-ref ref=<span class="string">"CONSOLE"</span> /&gt;</span><br><span class="line">        &lt;appender-ref ref=<span class="string">"FILE"</span> /&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>至此，完成修改。</p>]]></content>
    
    
    
    <tags>
      
      <tag>技术记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Java中使用List或Map中的contains或containsKey方法判断自定义对象</title>
    <link href="/2020/05/08/20050801/"/>
    <url>/2020/05/08/20050801/</url>
    
    <content type="html"><![CDATA[<p><strong>对于普通Java类型</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; testList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">testList.add(<span class="string">"A"</span>);</span><br><span class="line">testList.add(<span class="string">"B"</span>);</span><br><span class="line">testList.add(<span class="string">"C"</span>);</span><br><span class="line">String newStr = <span class="string">"A"</span>;</span><br><span class="line"><span class="keyword">if</span> (testList.contains(newStr))&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"exist"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"no exist"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>但对于自定义类型，直接使用contains方法不能达到预期效果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; testList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">testList.add(<span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"A"</span>));</span><br><span class="line">testList.add(<span class="keyword">new</span> User(<span class="number">2</span>,<span class="string">"B"</span>));</span><br><span class="line">testList.add(<span class="keyword">new</span> User(<span class="number">3</span>,<span class="string">"C"</span>));</span><br><span class="line">User newUser = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"A"</span>);</span><br><span class="line"><span class="keyword">if</span> (testList.contains(newUser))&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"exist"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"no exist"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况下，返回no exist。</p><p><strong>观察List中contains方法源码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">               <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                   <span class="keyword">return</span> i;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">               <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                   <span class="keyword">return</span> i;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>从源码中可以看到，contains方法调用indexOf方法，并使用了equals来判断是否相等。</p><p><strong>关于equals：</strong></p><p>equals在比较字符串是与==是有区别的（因为String也重写了equals），具体这里不再说明。但是对比object对象是的效果与==是一致的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>重写equals：</strong></p><p>根据以上源码，我们知道用contains比较自定义对象时，不能直接使用，需要重写equals方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> User)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       User user = (User) o;</span><br><span class="line">       <span class="keyword">return</span> userId.equals(user.userId) &amp;&amp;</span><br><span class="line">               userName.equals(user.userName);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>若使用ieda，可以直接generate出这个方法并重写，不需要手写。</p><p>*<em>重写hashcode： *</em></p><p>关于为什么在重写equals方法时要同时重写hashcode方法，应该都已经有所了解，这里简单引用一下。</p><blockquote><h3 id="hashCode（）与-equals（）的相关规定"><a href="#hashCode（）与-equals（）的相关规定" class="headerlink" title="hashCode（）与 equals（）的相关规定"></a>hashCode（）与 equals（）的相关规定</h3><ol><li>如果两个对象相等，则 hashcode 一定也是相同的</li><li>两个对象相等,对两个对象分别调用 equals 方法都返回 true</li><li>两个对象有相同的 hashcode 值，它们也不一定是相等的</li><li><strong>因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖</strong></li><li>hashCode() 的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> Objects.hash(userId, userName);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>通用可以使用idea自动生成。</p><p>至此，使用contains方法判断自定义对象就可以正常使用了。</p><p>Map中的containsKey方法同理，以下记录一下真实的使用情况（可无视）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatchStationOilConcessionsFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String shopId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String goodsId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        BatchStationOilConcessionsFilter that = (BatchStationOilConcessionsFilter) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(shopId, that.shopId) &amp;&amp;</span><br><span class="line">                Objects.equals(goodsId, that.goodsId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(shopId, goodsId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dataFilter</span><span class="params">(List&lt;BatchStationOilConcessionsDTO&gt; batchStationOilConcessionsDTOList)</span></span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必须保证顺序</span></span><br><span class="line">        Map&lt;BatchStationOilConcessionsFilter, Date&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把shopId和goodsId存进batchStationOilConcessionsFilterList</span></span><br><span class="line">        <span class="keyword">for</span> (BatchStationOilConcessionsDTO batchStationOilConcessionsDTO : batchStationOilConcessionsDTOList)&#123;</span><br><span class="line">            BatchStationOilConcessionsFilter batchStationOilConcessionsFilter = <span class="keyword">new</span> BatchStationOilConcessionsFilter();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                BeanUtils.copyProperties(batchStationOilConcessionsFilter, batchStationOilConcessionsDTO);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(batchStationOilConcessionsFilter))&#123;</span><br><span class="line">                <span class="comment">// 记录index,后面删除</span></span><br><span class="line">                list.add(batchStationOilConcessionsDTO.getIndex());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(batchStationOilConcessionsFilter, <span class="keyword">new</span> Date());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"重复的："</span> + list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>技术记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于springboot部署在windows系统</title>
    <link href="/2020/04/27/20042703/"/>
    <url>/2020/04/27/20042703/</url>
    
    <content type="html"><![CDATA[<p><strong>问题：</strong></p><p>若springboot通过在cmd窗口运行java -jar的方式部署在windows系统，在cmd窗口关闭后，服务会同时关闭。</p><p><strong>以下方式可以把服务注册到系统并长期运行：</strong></p><ol><li><p>首先下载WinSW。这是一个把服务在系统上注册、卸载的工具，github上开源。可以在这里下载<a href="https://github.com/kohsuke/winsw" target="_blank" rel="noopener">WinSW的github地址</a>。主要下载winsw.exe和winsw.xml两个文件，下载后放入一个目录例如winsw。</p></li><li><p>下载后把这两个文件修改为服务的名字。并打开xml文件编写配置，示例如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;service&gt;</span><br><span class="line">  &lt;id&gt;xxx-service&lt;/id&gt; &lt;!--服务ID--&gt;</span><br><span class="line">  &lt;name&gt;xxx后端服务&lt;/name&gt; &lt;!--服务名--&gt;</span><br><span class="line">  &lt;description&gt;xxx后端服务&lt;/description&gt; &lt;!--服务描述--&gt;</span><br><span class="line">  &lt;executable&gt;F:\Java\xxx部署测试\jre1.8.0_231\bin\java&lt;/executable&gt; &lt;!--运行方式--&gt;</span><br><span class="line">  &lt;arguments&gt;-jar "F:\Java\xxx部署测试\xxx-0.0.1-SNAPSHOT.jar"&lt;/arguments&gt; &lt;!--执行参数--&gt;</span><br><span class="line">  &lt;logmode&gt;rotate&lt;/logmode&gt; &lt;!--循环日志--&gt;</span><br><span class="line">&lt;/service&gt;</span><br></pre></td></tr></table></figure><p>更多具体参数可参考官网。</p></li><li><p>在winsw同目录下放入springboot打包后的xxx-0.0.1-SNAPSHOT.jar。</p></li><li><p>关于注册与开启服务。进入winsw目录，打开cmd窗口。</p><p>运行以下命令以注册服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx-service install</span><br></pre></td></tr></table></figure><p>运行以下命令以启动服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx-service start</span><br></pre></td></tr></table></figure><p>此时，可在任务管理器——服务选项看到此服务并已开启。（测试时重启系统后服务会自动开启，需加以验证）。</p></li><li><p>关于停止与卸载服务。进入winsw目录，打开cmd窗口。</p><p>运行以下命令以停止服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx-service stop</span><br></pre></td></tr></table></figure><p>运行以下命令以卸载服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx-service uninstall</span><br></pre></td></tr></table></figure></li><li><p>*可以编写对应bat脚本，方便操作。示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@echo</span> off</span><br><span class="line"></span><br><span class="line">::打开cmd注册xxx服务,然后启动</span><br><span class="line">start cmd /k <span class="string">"cd/d winsw&amp;&amp;xxx-service install&amp;&amp;xxx-service start&amp;&amp;exit"</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@echo</span> off</span><br><span class="line"></span><br><span class="line">::打开cmd停止xxx服务，然后卸载</span><br><span class="line">start cmd /k <span class="string">"cd/d winsw&amp;&amp;xxx-service stop&amp;&amp;xxx-service uninstall&amp;&amp;exit"</span></span><br></pre></td></tr></table></figure><p>此两bat文件放于winsw同目录下，双击运行即可。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>技术记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用SSH连接数据库示例代码记录</title>
    <link href="/2020/04/27/20042702/"/>
    <url>/2020/04/27/20042702/</url>
    
    <content type="html"><![CDATA[<p><strong>需求：</strong></p><p>数据库使用普通连接失败，需要使用ssh连接方式。</p><p><strong>原本配置：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">oil-pay:</span><br><span class="line">url: jdbc:mysql:<span class="comment">//ip:3306/数据库名?Unicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">username: 用户名</span><br><span class="line">password: 密码</span><br><span class="line">driver-class-name: com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure><p><strong>使用ssh需要修改配置及增加代码:</strong></p><p><strong>ssh配置：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">oil-pay:</span><br><span class="line">url: jdbc:mysql:<span class="comment">//127.0.0.1:3307/数据库名?Unicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span></span><br><span class="line">username: 用户名同上</span><br><span class="line">password: 密码同上</span><br><span class="line">driver-class-name: com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure><p><strong>增加config代码：</strong></p><ol><li>编写MyContextListener实现ServletContextListener</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyContextListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SSHConnection conexionssh;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyContextListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> ServletContextListener#contextInitialized(ServletContextEvent)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent arg0)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 建立连接</span></span><br><span class="line">        log.info(<span class="string">"准备建立连接"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conexionssh = <span class="keyword">new</span> SSHConnection();</span><br><span class="line">            conexionssh.SSHConnection();</span><br><span class="line">            log.info(<span class="string">"成功建立SSH连接"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            log.error(<span class="string">"创建SSH连接失败"</span>);</span><br><span class="line">            <span class="comment">// error connecting SSH server</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> ServletContextListener#contextDestroyed(ServletContextEvent)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent arg0)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 断开连接</span></span><br><span class="line">        log.info(<span class="string">"准备关闭SSH连接"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conexionssh.closeSSH();</span><br><span class="line">            log.info(<span class="string">"成功断开SSH连接"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"断开SSH连接出错"</span>);</span><br><span class="line">            <span class="comment">// error closing SSH server</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>编写SSHConnection</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SSHConnection</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SSH服务器登录名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String user = <span class="string">"root"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SSH服务器登录密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String password = <span class="string">"xxxxxx"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SSH服务器公网IP</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String host = <span class="string">"x.x.x.x"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SSH服务器默认端口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port = <span class="number">22</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本地端口，随便选一个没占用的即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> local_port = <span class="number">3307</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要访问的mysql的IP</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String remote_host = <span class="string">"ip"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要访问的mysql的端口号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> remote_port = <span class="number">3306</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Session session = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *    建立SSH连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SSHConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JSch jsch = <span class="keyword">new</span> JSch();</span><br><span class="line">            session = jsch.getSession(user, host, port);</span><br><span class="line">            session.setPassword(password);</span><br><span class="line">            session.setConfig(<span class="string">"StrictHostKeyChecking"</span>, <span class="string">"no"</span>);</span><br><span class="line">            <span class="comment">// 日志打印</span></span><br><span class="line">            session.connect();</span><br><span class="line">            session.setPortForwardingL(local_port, remote_host, remote_port);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"建立SSH连接失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *    断开SSH连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeSSH</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session.disconnect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>技术记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于List遍历过程中删除元素报错问题</title>
    <link href="/2020/04/27/20042701/"/>
    <url>/2020/04/27/20042701/</url>
    
    <content type="html"><![CDATA[<p><strong>报错：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.util.ConcurrentModificationException: <span class="keyword">null</span></span><br><span class="line">at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:<span class="number">909</span>) ~[na:<span class="number">1.8</span><span class="number">.0_231</span>]</span><br><span class="line">at java.util.ArrayList$Itr.next(ArrayList.java:<span class="number">859</span>) ~[na:<span class="number">1.8</span><span class="number">.0_231</span>]</span><br></pre></td></tr></table></figure><p><strong>问题代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (RptShiftCashCurrencyNEntity rptShiftCashCurrencyNEntity : rptShiftCashCurrencyNEntityList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"B"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()) || <span class="string">"G"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()) || <span class="string">"N"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()) || <span class="string">"8"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()) || <span class="string">"9"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType())) &#123;</span><br><span class="line">                rptShiftCashCurrencyNEntityList.remove(rptShiftCashCurrencyNEntity);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>在解决问题前，先看一段简化代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(String s:list)&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.equals(<span class="string">"B"</span>))&#123;</span><br><span class="line">        list.remove(x);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法会存在问题，会抛出ConcurrentModificationException。 因为元素在使用的时候发生了并发的修改，导致异常抛出。但是删除完毕马上使用break跳出，则不会触发报错。 </p><p><strong>解决：</strong></p><p>使用迭代器完成删除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    String s = it.next();</span><br><span class="line">    <span class="keyword">if</span>(s.equals(<span class="string">"B"</span>))&#123;</span><br><span class="line">        it.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题代码修改为：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;RptShiftCashCurrencyNEntity&gt; it = rptShiftCashCurrencyNEntityList.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">            RptShiftCashCurrencyNEntity rptShiftCashCurrencyNEntity = it.next();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"B"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()) || <span class="string">"G"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()) || <span class="string">"N"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()) || <span class="string">"8"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()) || <span class="string">"9"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType())) &#123;</span><br><span class="line">                it.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>也可以使用java8特性removeIf方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rptShiftCashCurrencyNEntityList.removeIf(rptShiftCashCurrencyNEntity -&gt; <span class="string">"B"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()) || <span class="string">"G"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()) || <span class="string">"N"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()) || <span class="string">"8"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()) || <span class="string">"9"</span>.equals(rptShiftCashCurrencyNEntity.getPosPayType()));</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>技术记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于程序连接远程数据库错误，而使用数据库连接工具正常</title>
    <link href="/2020/04/03/20040301/"/>
    <url>/2020/04/03/20040301/</url>
    
    <content type="html"><![CDATA[<p><strong>报错：</strong></p><p><img src="E:%5CTypora%5Cimg%5Ca.png" srcset="/img/loading.gif" alt=""></p><p><strong>原因：</strong>（待明确）</p><p>上次连接未断开。</p><p>1、程序上在结束时未正常断开，导致服务端已放弃链接而客户端（程序）链接还存在，下次查询时未重新建立链接。</p><p>2、服务端还保留着链接，而客户端（程序）在建立连接时检测到链接已被占用导致异常。</p><p><strong>解决：</strong></p><p>重启服务端sql server服务。</p>]]></content>
    
    
    
    <tags>
      
      <tag>技术记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Nacos连接Mysql8.0版本不支持</title>
    <link href="/2020/03/27/20032701/"/>
    <url>/2020/03/27/20032701/</url>
    
    <content type="html"><![CDATA[<p><strong>原因：</strong></p><p>mysql8.0以后驱动有所变化，无法使用旧驱动连接。</p><p><strong>解决：</strong></p><p>1、修改目录下pom.xml文件中的mysql驱动</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.0.16&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2、 修改naming这个项目 com.alibaba.nacos.naming.healthcheck 包下的 MysqlHealthCheckProcessor 类，引入的驱动包修改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mysql.cj.jdbc.MysqlDataSource;</span><br></pre></td></tr></table></figure><p>3、 修改 console这项目 resources/META-INF下 nacos-default.properties这个文件 ，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.url<span class="number">.0</span>=jdbc:mysql:<span class="comment">//localhost:3306/nacos?serverTimezone=UTC&amp;characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line">db.url<span class="number">.1</span>=jdbc:mysql:<span class="comment">//localhost:3306/nacos?serverTimezone=UTC&amp;characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br></pre></td></tr></table></figure><p> 注意：在db.url.0中添加时区 serverTimezone=UTC </p><p>4、打包</p><p> cmd命令窗口进入项目根目录执行： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -Prelease-nacos clean install -U</span><br></pre></td></tr></table></figure><p> 执行完成之后打包好的文件在项目根目录下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根目录\distribution\target</span><br></pre></td></tr></table></figure><p>5、修改配置</p><p> 打开conf目录下的配置文件，在末尾添加数据源配置： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.platform=mysql</span><br><span class="line">db.num=<span class="number">1</span></span><br><span class="line">db.url<span class="number">.0</span>=jdbc:mysql:<span class="comment">//localhost:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;serverTimezone=UTC</span></span><br><span class="line">db.user=root</span><br><span class="line">db.password=<span class="number">123456</span></span><br></pre></td></tr></table></figure><p>6、 然后在MySQL数据库中新建nacos数据库，并导入Nacos解压包conf目录下的nacos-mysql.sql脚本 </p><p>7、启动</p>]]></content>
    
    
    
    <tags>
      
      <tag>技术记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2020/03/24/test/"/>
    <url>/2020/03/24/test/</url>
    
    <content type="html"><![CDATA[<p>置顶测试2</p>]]></content>
    
    
    
    <tags>
      
      <tag>闲情逸致</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我有故事了，你有酒吗？</title>
    <link href="/2020/03/24/story/"/>
    <url>/2020/03/24/story/</url>
    
    <content type="html"><![CDATA[<p>很多时候，都在听别人的故事，或是惨淡潦倒，或是春风得意，但那始终属于别人。其实，我也有自己的故事，只是，还未碰到喜欢的酒，还没遇见合适的人。</p>]]></content>
    
    
    
    <tags>
      
      <tag>闲情逸致</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Spring Cloud Eureka注册中心引入Spring Security后，服务无法注册的问题</title>
    <link href="/2020/03/24/20032401/"/>
    <url>/2020/03/24/20032401/</url>
    
    <content type="html"><![CDATA[<p><strong>报错：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server</span><br><span class="line">at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:<span class="number">112</span>) ~[eureka-client-<span class="number">1.9</span><span class="number">.17</span>.jar:<span class="number">1.9</span><span class="number">.17</span>]</span><br><span class="line">at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:<span class="number">56</span>) ~[eureka-client-<span class="number">1.9</span><span class="number">.17</span>.jar:<span class="number">1.9</span><span class="number">.17</span>]</span><br><span class="line">at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$<span class="number">1</span>.execute(EurekaHttpClientDecorator.java:<span class="number">59</span>) ~[eureka-client-<span class="number">1.9</span><span class="number">.17</span>.jar:<span class="number">1.9</span><span class="number">.17</span>]</span><br><span class="line">at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:<span class="number">77</span>) ~[eureka-client-<span class="number">1.9</span><span class="number">.17</span>.jar:<span class="number">1.9</span><span class="number">.17</span>]</span><br><span class="line">at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:<span class="number">56</span>) ~[eureka-client-<span class="number">1.9</span><span class="number">.17</span>.jar:<span class="number">1.9</span><span class="number">.17</span>]</span><br><span class="line">at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:<span class="number">850</span>) ~[eureka-client-<span class="number">1.9</span><span class="number">.17</span>.jar:<span class="number">1.9</span><span class="number">.17</span>]</span><br><span class="line">at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:<span class="number">121</span>) [eureka-client-<span class="number">1.9</span><span class="number">.17</span>.jar:<span class="number">1.9</span><span class="number">.17</span>]</span><br><span class="line">at com.netflix.discovery.InstanceInfoReplicator$<span class="number">1</span>.run(InstanceInfoReplicator.java:<span class="number">101</span>) [eureka-client-<span class="number">1.9</span><span class="number">.17</span>.jar:<span class="number">1.9</span><span class="number">.17</span>]</span><br><span class="line">at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:<span class="number">511</span>) [na:<span class="number">1.8</span><span class="number">.0_231</span>]</span><br><span class="line">at java.util.concurrent.FutureTask.run(FutureTask.java:<span class="number">266</span>) [na:<span class="number">1.8</span><span class="number">.0_231</span>]</span><br><span class="line">at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$<span class="number">201</span>(ScheduledThreadPoolExecutor.java:<span class="number">180</span>) [na:<span class="number">1.8</span><span class="number">.0_231</span>]</span><br><span class="line">at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:<span class="number">293</span>) [na:<span class="number">1.8</span><span class="number">.0_231</span>]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1149</span>) [na:<span class="number">1.8</span><span class="number">.0_231</span>]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">624</span>) [na:<span class="number">1.8</span><span class="number">.0_231</span>]</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>) [na:<span class="number">1.8</span><span class="number">.0_231</span>]</span><br></pre></td></tr></table></figure><p><strong>原因：</strong></p><p>新版本的security默认开启csrf了，关掉就好了</p><p><strong>解决：</strong></p><p>新键WebSecurityConfig类，修改默认配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.csrf().disable(); <span class="comment">// 关闭csrf</span></span><br><span class="line">        http.authorizeRequests().anyRequest().authenticated().and().httpBasic(); <span class="comment">// 开启认证</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>技术记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
